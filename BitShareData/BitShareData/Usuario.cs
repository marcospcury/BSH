//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace BitShareData
{
    public partial class Usuario
    {
        #region Primitive Properties
    
        public virtual int IdUsuario
        {
            get;
            set;
        }
    
        public virtual string Nome
        {
            get;
            set;
        }
    
        public virtual string Senha
        {
            get;
            set;
        }
    
        public virtual string Categoria
        {
            get;
            set;
        }
    
        public virtual string PassKey
        {
            get;
            set;
        }
    
        public virtual double Ratio
        {
            get;
            set;
        }
    
        public virtual int IdUsuarioPadrinho
        {
            get;
            set;
        }
    
        public virtual bool Ativo
        {
            get;
            set;
        }
    
        public virtual double Downloaded
        {
            get;
            set;
        }
    
        public virtual double Uploaded
        {
            get;
            set;
        }
    
        public virtual System.DateTime DataCadastro
        {
            get;
            set;
        }
    
        public virtual bool Advertido
        {
            get;
            set;
        }
    
        public virtual string Email
        {
            get;
            set;
        }
    
        public virtual bool Admin
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Torrent> Torrents
        {
            get
            {
                if (_torrents == null)
                {
                    var newCollection = new FixupCollection<Torrent>();
                    newCollection.CollectionChanged += FixupTorrents;
                    _torrents = newCollection;
                }
                return _torrents;
            }
            set
            {
                if (!ReferenceEquals(_torrents, value))
                {
                    var previousValue = _torrents as FixupCollection<Torrent>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTorrents;
                    }
                    _torrents = value;
                    var newValue = value as FixupCollection<Torrent>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTorrents;
                    }
                }
            }
        }
        private ICollection<Torrent> _torrents;
    
        public virtual ICollection<TorrentSeed> TorrentSeeds
        {
            get
            {
                if (_torrentSeeds == null)
                {
                    var newCollection = new FixupCollection<TorrentSeed>();
                    newCollection.CollectionChanged += FixupTorrentSeeds;
                    _torrentSeeds = newCollection;
                }
                return _torrentSeeds;
            }
            set
            {
                if (!ReferenceEquals(_torrentSeeds, value))
                {
                    var previousValue = _torrentSeeds as FixupCollection<TorrentSeed>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTorrentSeeds;
                    }
                    _torrentSeeds = value;
                    var newValue = value as FixupCollection<TorrentSeed>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTorrentSeeds;
                    }
                }
            }
        }
        private ICollection<TorrentSeed> _torrentSeeds;
    
        public virtual ICollection<TorrentLeech> TorrentLeeches
        {
            get
            {
                if (_torrentLeeches == null)
                {
                    var newCollection = new FixupCollection<TorrentLeech>();
                    newCollection.CollectionChanged += FixupTorrentLeeches;
                    _torrentLeeches = newCollection;
                }
                return _torrentLeeches;
            }
            set
            {
                if (!ReferenceEquals(_torrentLeeches, value))
                {
                    var previousValue = _torrentLeeches as FixupCollection<TorrentLeech>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTorrentLeeches;
                    }
                    _torrentLeeches = value;
                    var newValue = value as FixupCollection<TorrentLeech>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTorrentLeeches;
                    }
                }
            }
        }
        private ICollection<TorrentLeech> _torrentLeeches;

        #endregion

        #region Association Fixup
    
        private void FixupTorrents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Torrent item in e.NewItems)
                {
                    item.UsuarioLancamento = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Torrent item in e.OldItems)
                {
                    if (ReferenceEquals(item.UsuarioLancamento, this))
                    {
                        item.UsuarioLancamento = null;
                    }
                }
            }
        }
    
        private void FixupTorrentSeeds(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TorrentSeed item in e.NewItems)
                {
                    item.Usuario = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TorrentSeed item in e.OldItems)
                {
                    if (ReferenceEquals(item.Usuario, this))
                    {
                        item.Usuario = null;
                    }
                }
            }
        }
    
        private void FixupTorrentLeeches(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TorrentLeech item in e.NewItems)
                {
                    item.Usuario = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TorrentLeech item in e.OldItems)
                {
                    if (ReferenceEquals(item.Usuario, this))
                    {
                        item.Usuario = null;
                    }
                }
            }
        }

        #endregion

    }
}
