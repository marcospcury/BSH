//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace BitShareData
{
    public partial class Torrent
    {
        #region Primitive Properties
    
        public virtual int IdTorrent
        {
            get;
            set;
        }
    
        public virtual string Nome
        {
            get;
            set;
        }
    
        public virtual string HashInfo
        {
            get;
            set;
        }
    
        public virtual double Tamanho
        {
            get;
            set;
        }
    
        public virtual int Seeds
        {
            get;
            set;
        }
    
        public virtual int Leechers
        {
            get;
            set;
        }
    
        public virtual System.DateTime DataLancamento
        {
            get;
            set;
        }
    
        public virtual bool FreeLeech
        {
            get;
            set;
        }
    
        public virtual bool Ativo
        {
            get;
            set;
        }
    
        public virtual bool PrimeiroSnatch
        {
            get;
            set;
        }
    
        public virtual int Downloads
        {
            get;
            set;
        }
    
        public virtual string Categoria
        {
            get;
            set;
        }
    
        public virtual string Arquivo
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual Usuario UsuarioLancamento
        {
            get { return _usuarioLancamento; }
            set
            {
                if (!ReferenceEquals(_usuarioLancamento, value))
                {
                    var previousValue = _usuarioLancamento;
                    _usuarioLancamento = value;
                    FixupUsuarioLancamento(previousValue);
                }
            }
        }
        private Usuario _usuarioLancamento;
    
        public virtual ICollection<ArquivoTorrent> ArquivoTorrents
        {
            get
            {
                if (_arquivoTorrents == null)
                {
                    var newCollection = new FixupCollection<ArquivoTorrent>();
                    newCollection.CollectionChanged += FixupArquivoTorrents;
                    _arquivoTorrents = newCollection;
                }
                return _arquivoTorrents;
            }
            set
            {
                if (!ReferenceEquals(_arquivoTorrents, value))
                {
                    var previousValue = _arquivoTorrents as FixupCollection<ArquivoTorrent>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupArquivoTorrents;
                    }
                    _arquivoTorrents = value;
                    var newValue = value as FixupCollection<ArquivoTorrent>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupArquivoTorrents;
                    }
                }
            }
        }
        private ICollection<ArquivoTorrent> _arquivoTorrents;
    
        public virtual ICollection<TorrentSeed> TorrentSeeds
        {
            get
            {
                if (_torrentSeeds == null)
                {
                    var newCollection = new FixupCollection<TorrentSeed>();
                    newCollection.CollectionChanged += FixupTorrentSeeds;
                    _torrentSeeds = newCollection;
                }
                return _torrentSeeds;
            }
            set
            {
                if (!ReferenceEquals(_torrentSeeds, value))
                {
                    var previousValue = _torrentSeeds as FixupCollection<TorrentSeed>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTorrentSeeds;
                    }
                    _torrentSeeds = value;
                    var newValue = value as FixupCollection<TorrentSeed>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTorrentSeeds;
                    }
                }
            }
        }
        private ICollection<TorrentSeed> _torrentSeeds;
    
        public virtual ICollection<TorrentLeech> TorrentLeeches
        {
            get
            {
                if (_torrentLeeches == null)
                {
                    var newCollection = new FixupCollection<TorrentLeech>();
                    newCollection.CollectionChanged += FixupTorrentLeeches;
                    _torrentLeeches = newCollection;
                }
                return _torrentLeeches;
            }
            set
            {
                if (!ReferenceEquals(_torrentLeeches, value))
                {
                    var previousValue = _torrentLeeches as FixupCollection<TorrentLeech>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTorrentLeeches;
                    }
                    _torrentLeeches = value;
                    var newValue = value as FixupCollection<TorrentLeech>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTorrentLeeches;
                    }
                }
            }
        }
        private ICollection<TorrentLeech> _torrentLeeches;
    
        public virtual DetalheTorrent DetalheTorrent
        {
            get { return _detalheTorrent; }
            set
            {
                if (!ReferenceEquals(_detalheTorrent, value))
                {
                    var previousValue = _detalheTorrent;
                    _detalheTorrent = value;
                    FixupDetalheTorrent(previousValue);
                }
            }
        }
        private DetalheTorrent _detalheTorrent;

        #endregion

        #region Association Fixup
    
        private void FixupUsuarioLancamento(Usuario previousValue)
        {
            if (previousValue != null && previousValue.Torrents.Contains(this))
            {
                previousValue.Torrents.Remove(this);
            }
    
            if (UsuarioLancamento != null)
            {
                if (!UsuarioLancamento.Torrents.Contains(this))
                {
                    UsuarioLancamento.Torrents.Add(this);
                }
            }
        }
    
        private void FixupDetalheTorrent(DetalheTorrent previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Torrent, this))
            {
                previousValue.Torrent = null;
            }
    
            if (DetalheTorrent != null)
            {
                DetalheTorrent.Torrent = this;
            }
        }
    
        private void FixupArquivoTorrents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ArquivoTorrent item in e.NewItems)
                {
                    item.Torrent = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ArquivoTorrent item in e.OldItems)
                {
                    if (ReferenceEquals(item.Torrent, this))
                    {
                        item.Torrent = null;
                    }
                }
            }
        }
    
        private void FixupTorrentSeeds(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TorrentSeed item in e.NewItems)
                {
                    item.Torrent = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TorrentSeed item in e.OldItems)
                {
                    if (ReferenceEquals(item.Torrent, this))
                    {
                        item.Torrent = null;
                    }
                }
            }
        }
    
        private void FixupTorrentLeeches(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TorrentLeech item in e.NewItems)
                {
                    item.Torrent = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TorrentLeech item in e.OldItems)
                {
                    if (ReferenceEquals(item.Torrent, this))
                    {
                        item.Torrent = null;
                    }
                }
            }
        }

        #endregion

    }
}
